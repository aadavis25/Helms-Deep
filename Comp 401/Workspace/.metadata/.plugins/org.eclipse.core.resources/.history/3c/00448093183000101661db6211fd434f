public class BoundedBag {

	// Data members
	private int [] contents; // Elements of the BoundedBag.
	private int topPosition; // Index of highest used position in contents.

	/**
	 * Default constructor - creates an empty BoundedBag.
	 */
	public BoundedBag() {
		contents = new int [4];
		topPosition = -1;
	}

	public void add( int theValue) {
		contents[topPosition+1]=theValue; 
		topPosition++;
	}
	
	// returns true if theValue is in the BoundedBag
	public boolean contains(int theValue ) {
		boolean result=false;
		for(int index=0;index<=topPosition;index++){
			if (contents[index]==theValue){
				result=true;
				break;
			}
		}
		return result;
	}
		
	// deletes theValue from the BoundedBag
	// returns true if theValue was in the Bag,
	// otherwise return false.
	public boolean remove(int theValue) {
		boolean result=false;
		int[] tempArray = new int [contents.length];
		tempArray=contents;
		int[] contents;
		int numToRemove = 0;
		
		for( int index=0;index<=topPosition;index++ ){
			if (tempArray[index]==theValue){
				result=true;
				numToRemove++;
			}
		}
			contents = new int[numToRemove];
			for (int index2=0; index2<=tempArray.length; index2++){
				if (tempArray[index2]!=theValue){
					contents[(tempArray.length-numToRemove)-numToRemove] = tempArray[index2];
					numToRemove--;
				}
			}
		if (!result){
			contents = tempArray;
		}
		return result;
	}
	

	/**
	 * Return number of elements in the BoundedBag.
	 */
	public int size() {
		return 1 + topPosition;
	}
	
	/**
	 * Convert the BoundedBag to a String.
	 * Optional challenge - find a MUCH more efficient
	 * way to do this.
	 */
	@Override
	public String toString() {
		String retValue = "";
		if( -1 == topPosition ) return "empty";
		else {
			for(int i = 0; i <= topPosition; i++ ) {
				if( i > 0 ) retValue += ", ";
				retValue = retValue + contents[i];
			}
		
		return retValue;
	}
}
}
