
import static java.lang.System.out;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;


class WordList {

	/**
	 * WordList - a list of words. Used as a lookup dictionary for a spelling
	 * checker.
	 * 
	 * <P>
	 * This class was written to illustrate: good programming style,
	 *  and maximum use of self checking code. <B>Note
	 * that for a class as simple as WordList, this is overkill.</B> In
	 * practice, an experienced programmer would dispense with much (all?) the
	 * self checking and testing and rely on the correctness of the
	 * implementation of the Java Collection Class TreeSet.
	 * </P>
	 * 
	 * <P>
	 * Implementation Plan 1. add, toString - quick testing using
	 * System.out.println 2. contains, size - begin jUnit testing 3. readFile -
	 * the class is now ready to be used in SpellChecker application 4. clear
	 */

	Set<String> words;
	Collection listWords;
	final String ILLEGAL_CHARACTERS = ("\\!@#$%^&*()-_=+|]}[{';:/>.<,~`\'\"");
	
	/**
	 * Default constructor.
	 */
	WordList() {
		words = new TreeSet<String>();
		listWords = new List();
		listWords.add(words);
		
	}

	/**
	 * Add specified word to this word list if not already present. Return true
	 * if theWord was not present in the WordList.
	 */
	boolean add(String theWord) {
		int oldSize = words.size();
		if (!isLegalWord(theWord)){
			return false;
		}
		words.add(theWord);
		return (words.size() > oldSize);
	}
	/**
	 * @Observer
	 * @param theWord
	 * @return false if theWord contains illegal character
	 * 			true iff theWord does not contains illegal character
	 */
	private final boolean isLegalWord(String theWord){
		boolean result = true;
		for ( int index=0; index<ILLEGAL_CHARACTERS.length(); index++ ){
			if (theWord.lastIndexOf(ILLEGAL_CHARACTERS.charAt(index)) == -1){
				result = false;
			}
		}
		return result;
	}
	/**
	 * @Mutator iff the character is not in ILLEGAL_CHARACTERS
	 * @param character
	 * @return true if ILLEGAL_CHARACTERS did not previously contain the character
	 * 			false if the character was already in ILLEGAL_CHARACTERS and the character was not added 
	 */
	final boolean addIllegalChar(String character){
		int size = ILLEGAL_CHARACTERS.length();
		ILLEGAL_CHARACTERS.concat(character);
		return (size<ILLEGAL_CHARACTERS.length());
	}
	/**
	 * @Mutator iff the character is in ILLEGAL_CHARACTERS
	 * @param character
	 * @return true if ILLEGAL_CHARACTERS did previously contain the character
	 * 			false if the character was not in ILLEGAL_CHARACTERS and the character was not removed 
	 */
	final boolean removeIllegalCharacter(String character){
		int size = ILLEGAL_CHARACTERS.length();
		ILLEGAL_CHARACTERS.replaceAll(character, "");
		return (size>ILLEGAL_CHARACTERS.length());
	}
	
	/**
	 * @Mutator
	 * does what its name implies
	 */
	final void clear() {
		words.clear();
	}

	/**
	 * 
	 * @param theWord
	 * @return true if the character is in one of the lists
	 *  		false if it isn't
	 */
	final boolean contains(String theWord) {
		return words.contains(theWord);
		}

	/**
	 * Add contents of file to this word list.
	 * 
	 * @requires input file consists of words separated by one or more spaces.
	 * @param fileName -
	 *            name of file to read
	 * @throws FileNotFoundException
	 */
	final void readFile(String fileName) throws FileNotFoundException {

		Scanner inp = new Scanner(new File(fileName));
		while (inp.hasNext()) {
			String line = inp.nextLine();
			String[] word = line.split(" ");
			for (int i = 0; i < word.length; i++)
				words.add(word[i].trim());
		}
	}

	/**
	 * Return the number of entries in this WordList. Used for testing.
	 */
	final int size() {
		return words.size();
	}

	/**
	 * Return a String representation of all words in this WordList
	 */
	final public String toString() {
		return words.toString();
	}

}
