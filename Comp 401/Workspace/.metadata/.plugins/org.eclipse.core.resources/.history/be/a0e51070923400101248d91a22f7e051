public class BoundedBag {

	// Data members
	private int [] contents; // Elements of the BoundedBag.
	private int topPosition; // Index of highest used position in contents.

	/**
	 * Default constructor - creates an empty BoundedBag.
	 */
	public BoundedBag() {
		contents = new int [4];
		topPosition = -1;
	}

	public boolean add( int theValue) {
		if (topPosition!=3){
			contents[topPosition+1]=theValue; 
			topPosition++;
			return true;
		}
		else{
			return false;
		}
	}
	
	// returns true if theValue is in the BoundedBag
	public boolean contains(int theValue ) {
		boolean result=false;
		for(int index=0;index<=topPosition;index++){
			if (contents[index]==theValue){
				result=true;
				break;
			}
		}
		return result;
	}
		
	// deletes theValue from the BoundedBag
	// returns true if theValue was in the Bag,
	// otherwise return false.
	public boolean remove(int theValue) {
		int indexRemove = containsValue(theValue);
		removeValue(indexRemove);
		if (indexRemove!=-6){
			return true;
		}
		else{
			return false;
		}
	}
	
	public int containsValue(int theValue){
		int indexRemove=-6;
		for( int index=0;index<contents.length;index++ ){
			if (contents[index]==theValue){
				indexRemove=index;
				break;
			}
		}
		return indexRemove;
	}
	
	public void removeValue(int indexRemove){
		if (indexRemove!=-6){
			for (int index=indexRemove; index<=topPosition; index++){
				if (index<topPosition){
					contents[index]=contents[index+1];
				}
				else{
					contents[topPosition]=0;
				}
			}
			topPosition--;
		}
	}
	

	/**
	 * Return number of elements in the BoundedBag.
	 */
	public int size() {
		return 1 + topPosition;
	}
	
	/**
	 * Convert the BoundedBag to a String.
	 * Optional challenge - find a MUCH more efficient
	 * way to do this.
	 */
	public String toString() {
		String retValue = "";
		if( -1 == topPosition ) return "empty";
		else {
			retValue += contents[0];
			for(int i = 1; i <= topPosition; i++ ) {
				retValue = retValue + ", " + contents[i];
			}
		
		return retValue;
	}
}
}
