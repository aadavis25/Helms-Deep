public class SPTree {
	
	
	private static SPTNode root;
	public static int getSize(){ return root.size;}

	public class SPTNode<AnyType extends Comparable<? super AnyType>> {

		AnyType element;
		SPTNode<AnyType> left;
		SPTNode<AnyType> right;
		SPTNode<AnyType> parent;
		int size = 0;
		
		SPTNode (AnyType theElement){
			this(theElement, null, null, null);
		}
		
		SPTNode (AnyType theElement, SPTNode<AnyType> lt, SPTNode<AnyType> rt, SPTNode<AnyType> pt){
			element = theElement; right = rt; left = lt; parent = pt;
		}
		
		
		public void insert (AnyType x){
			insert(x,root);
		}
		
	private SPTNode<AnyType> insert(AnyType x, SPTNode<AnyType> t){
				/**
				 * Internal method to insert into a subtree
				 * @param x the item to insert
				 * @param t the node that roots the subtree
				 * @return the new root of the subtree
				 */
				if(t == null)
					return new SPTNode<AnyType>(x, null, null, null);
				
				int compareResult = x.compareTo(t.element);
				
				if(compareResult < 0){
					t.left = insert(x, t.left);
						if (t.parent == null)
							t = singleRight(t);
						else if (x.compareTo(t.left.element) < 0)
							t = zigzigRight(t);
						else 
							t = zigzagRight(t);
				}
				else if(compareResult > 0){
					t.right = insert(x, t.right);
						if (t.parent == null)
							t = singleLeft(t);
						else if (x.compareTo(t.right.element) > 0)
							t = zigzigLeft(t);
						else
							t = zigzagLeft(t);
				}
				else
					; //duplicate; do nothing
				t.size = t.left.size + t.right.size + 1;
				return t;
				
			}
		
	private SPTNode<AnyType> singleRight(SPTNode<AnyType> par){
		/**
		 * Rotate Splkay Tree node with left child, rotating to the right.
		 * Update sizes, then return the new root
		 */
		SPTNode<AnyType> x = par.left;
		par.left = x.right;
		x.right = part;
		par.parent = x; x.parent = null;
		par.size = par.left.size + par.right.size +1;
		x.size = x.left.size + par.size +1;
		return x;
	}
	private SPTNode<AnyType> singleLeft(SPTNode<AnyType> par){
		/**
		 * Rotate Splay Tree node with left child, rotating it to the left.
		 * Update sizes, then return the new root
		 */
		SPTNode<AnyType> x = par.right;
		par.right = x.left;
		x.left = par;
		par.parent = x; x.parent = null;
		par.size = par.left.size + par.right.size +1;
		x.size = x.right.size + par.size +1;
		return x;
	}
	private SPTNode<AnyType> zigzagLeft(SPTNode<AnyType> x){
		/**
		 * Rotate Splay tree node with right child, zigs to the left, zags to the right
		 * Update sizes and parents
		 */
		SPTNode<AnyType> par = x.parent;
		SPTNode<AnyType> grand = par.parent;
		x.parent = grand.parent;
		parent.right = x.left; parent.right.parent = parent;
		grand.left = x.right; grand.left.parent = grand;
		x.left = parent; 
		x.right = grand;
		grand.parent = x; par.parent = x;
		parent.size = parent.left.size + parent.right.size +1;
		grand.size = grand.left.size + grand.right.size +1;
		x.size = grand.size + parent.size +1;
		return x;
	}
	
	
	private SPTNode<AnyType> zigzagRight(SPTNode<AnyType> x){
		/**
		 * Rotate Splay tree node with left child, zigs to the right, zags to the left
		 * Update sizes and parents
		 */
		SPTNode<AnyType> par = x.parent;
		SPTNode<AnyType> grand = par.parent;
		x.parent = grand.parent;
		parent.left = x.right; parent.left.parent = parent;
		grand.right = x.left; grand.right.parent = grand;
		x.right = parent;
		x.left = grand;
		grand.parent = x; par.parent = x;
		parent.size = parent.left.size + parent.right.size +1;
		grand.size = grand.left.size + grand.right.size +1;
		x.size = grand.size + parent.size +1;
		return x;
	}		
	
	private SPTNode<AnyType> zigzigLeft(SPTNode<AnyType> x){
		SPTNode<AnyType> par = x.parent;
		SPTNode<AnyType> grand = par.parent;
		x.parent = grand.parent;
		grand.left = par.right; grand.left.parent = grand;
		par.left = x.right; par.left.parent = par;
		par.right = grand;
		x.right = par;
		grand.parent = par;
		par.parent = x;
		parent.size = parent.left.size + parent.right.size +1;
		grand.size = grand.left.size + grand.right.size +1;
		x.size = x.right.size + x.left.size +1;
		return x;
	}
	private SPTNode<AnyType> zigzigRight(SPTNode<AnyType> x){
		SPTNode<AnyType> par = x.parent;
		SPTNode<AnyType> grand = par.parent;
		x.parent = grand.parent;
		grand.right = par.left; grand.right.parent = grand;
		par.right = x.left; par.right.parent = par;
		par.left = grand;
		x.left = par;
		grand.parent = par;
		par.parent = x;
		parent.size = parent.left.size + parent.right.size +1;
		grand.size = grand.left.size + grand.right.size +1;
		x.size = x.left.size + x.right.size +1;
		return x;
	}	
	
	}
	}


