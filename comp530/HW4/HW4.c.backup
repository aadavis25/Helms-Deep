#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>

#define INPUT stdin
#define output_size 80
#define READ 0
#define WRITE 1
#define NUM_PROC 4
#define INT sizeof(int)

int pipe_rd_fp[2];
int pipe_fp_sp[2];
int pipe_sp_op[2];

//**See documentation above for produces and consumes**
//
//Define these functions
//read function: takess in raw characters and turns them into ascii code which it passes
//to the first-processing thread. Ends at EOF asfter passing it along
//
//Observer 
void read_func (){
	int c = 0;
	//don't need the read end

	while (1){
		//we can assert that there's a empty buffer for two reasons
		//first, this is the only thread that produces to it so no other one can touch it
		//second, if the empty buffers semaphore here passes its down, it means the first processing
		//thread has run empty buffers up so at least one caracter has to have been consumed

		c = fgetc(INPUT);
		write(pipe_rd_fp[WRITE], &c, INT);
		if (c == EOF){
			//pass EOF by closing off the pipe
			close(pipe_rd_fp[WRITE]);
			break;
		}
	}
}

//the first of the two processing functions: takes in a character in ascii and processes whether the character is a newline
//and if it is, it will pass along a space otherwise it passes the character. Ends on EOF after passing it along
//
//Modifier
void firstproc_func (){
	int c = 0;
	int space = 32;
	while(1) {
				//assert there must be at least one full buff if full buffers down passes
		//so read has run at least once and called full buffers up
		read(pipe_rd_fp[READ], &c, INT);
		//do our processing, pass the space if we meet a newline
		if (c == '\n')
			write(pipe_fp_sp[WRITE], &space, INT);
		
		//we can assert that we know the buffer isn't full
		//by similar logic as the above. This is the only thread that
		//writes to it and if empty buffers passes, second process thread function has run
		else
			write(pipe_fp_sp[WRITE], &c, INT);
		if (c == EOF){
			close(pipe_fp_sp[WRITE]);//pass EOF by closing pipe
			close(pipe_rd_fp[READ]);
			break;	
		}
	}
}

//second processor function: takes in a character and checks if it's an asterisk. If not, it just passes the character 
//If so, pulls in another character and check if it's another
//asterisk. If so, it will pass along a carat symbol, if not it just passes both characters. Ends at EOF after passing
//
//Modifier
void secondproc_func(){
	/*
 	use a buffer system to check for double-asteriks
	*/
	int c = 0; //if c is not an asterisk, just produce it
	int char_buff = 0;
	int carat = '^'; //convenience
	while(1) {
		//assert there must be at least one full buff if full buffers down passes
		//so read has run at least once and called full buffers up
		read(pipe_fp_sp[READ], &c, INT);
		if (c == '*'){//if c is a asterisk, get another character to check
			read(pipe_fp_sp[READ], &char_buff, INT);
			if (char_buff == '*'){
				//we can assert that we know the buffer isn't full
				//by similar logic as the above. This is the only thread that
				//writes to it and if empty buffers passes, output thread function has run
				
				write(pipe_sp_op[WRITE], &carat, INT); //if both are asterisks, produce carat
			}
			else{
				write(pipe_sp_op[WRITE], &c, INT);		//if only one is asterisk, produce both
				write(pipe_sp_op[WRITE], &char_buff, INT);
			}
		}
		else{
			write(pipe_sp_op[WRITE], &c, INT); //if not asterisks, produce c
		}
		
		if (c == EOF || char_buff == EOF){
			//close pipe, pass EOF
			close(pipe_sp_op[WRITE]);
			close(pipe_fp_sp[READ]);
			break;
		}
	}
}

//The output thread: Takes in characters and jams them in an array to wait. Once the thread reaches 80 characters, it outputs the array.
//Exciting.
//Ends at EOF; doesn't output it because it's a weird lookin character.
//
//Observer, kinda
void output_func (){
	//80 char array to be output
	char output[81];
	int c = 0;
	printf("%s","I RAN");
	while(1) {
		read(pipe_sp_op[READ], &c, INT);
		output[strlen(output)] = c;
		printf("%c",c);

		if (strlen(output) == output_size){
			printf("%s", output);
			printf("%c", '\n');
			memset(output, '\0', strlen(output) * sizeof(char));
		}
		if (c == EOF){
			close(pipe_sp_op[READ]);
			break;
		}

	}
}

int main(void){
	pipe(pipe_rd_fp);
	pipe(pipe_fp_sp);
	pipe(pipe_sp_op);
	pid_t pid;
	int i;
	for (i  = 0; i < NUM_PROC; i++){
		pid = fork();

		if(pid == -1){
			perror("FORK ERROR");
			break;
		}
		else if (pid == 0 && i == 0){
			read_func();
			exit(0);
		}
		else if (pid == 0 && i == 1){
			firstproc_func();
			exit(0);
		}
		else if (pid == 0 && i == 2){
			secondproc_func();
			exit(0);
		}
		else if (pid == 0 && i == 3){
			output_func();
			exit(0);
		}
	}
	wait(NULL);

	return 0;
}

